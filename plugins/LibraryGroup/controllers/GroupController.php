<?php
/** Zend_Application */
require_once 'Zend/Application.php';
require_once CONTROLLER_DIR.'/UsersController.php';

class LibraryGroup_GroupController extends UsersController {

 protected $_autoCsrfProtection = true;

 public function init()
 {
   // $this->newUser_group_object = new LibraryGroupUserRelationship;
    $this->newGroups_names_object = new LibraryListOfGroups;
    $this->_helper->db->setDefaultModelName('User');
 }

 public function addAction()
 {
        // Create a new page.
       $user = new User();
	     $form_user = $this->_getUserForm($user);
	     $groupUserObjects = LibraryGroupUserRelationship::findUserRelationshipRecords($user->id);
	     foreach($groupUserObjects as $groupUserObject) {
		  	   $groupUserValue[]= $groupUserObject['group_id'];
			 }

	     $form_user->addElement('Multiselect', 'group', array(
                'label' => __('Group'),
                'description' => __("Select the unit in the Library the user belong to."),
                'multiOptions' => $this->newGroups_names_object->get_groups_names(),
                'value' => ((!empty($user->id)) ? $groupUserValue : ''),
                'class' => 'field',
                'order' => 3
          ));

        $form_user->setSubmitButtonText(__('Add User'));
        $this->view->form = $form_user;
	      if (!$this->getRequest()->isPost()) {
				 		return;
	      }

	      if (!$form_user->isValid($_POST)) {
				   		$this->_helper->flashMessenger(__('There was an invalid entry on the form. Please try again.'), 'error');
              return;
        }

        $user->setPostData($_POST);

        if ($user->save(false)) {
        $success = true;
         if ($user->role != 'super') {
	           if(!empty($user->group)) {
  		          $groups = $user->group;
      		      foreach($groups as $group) {
          	  	  $newUser_group= new LibraryGroupUserRelationship();
          	   		$newUser_group->entity_id = $user->id;
             			$newUser_group->group_id = $group;
             			$newUser_group->save();
             	}
        	  }
       }
       if ($success) {
          	$this->_helper->flashMessenger(
            __('The user "%s" was successfully added!', $user->username),
                    'success'
              );
       	   $this->_helper->redirector->gotoUrl('/users/browse');
      }
      } else {
            $this->_helper->flashMessenger($user->getErrors());
        }
   }

 public function editAction()
 {
    $user = $this->_helper->db->findById();
    $currentUser = $this->getCurrentUser();
    $groupUserObjects = LibraryGroupUserRelationship::findUserRelationshipRecords($user->id);
	  foreach($groupUserObjects as $groupUserObject) {
		  	   $groupUserValue[]= $groupUserObject['group_id'];
		}

  	$changePasswordForm = new Omeka_Form_ChangePassword;
    $changePasswordForm->setUser($user);
    $form_user = $this->_getUserForm($user);
    $form_user->setSubmitButtonText(__('Save Changes'));
    if ($currentUser->role == 'super') {
        $form_user->addElement('Multiselect', 'group', array(
             'label' => __('Group'),
             'description' => __("Select the unit in the Library the user belong to."),
             'multiOptions' => $this->newGroups_names_object->get_groups_names(),
             'value' => ((!empty($user->id)) ? $groupUserValue  : ''),
             'class' => 'field',
             'order' => 3
          ));
    }

    $form_user->setDefaults(array(
         'username' => $user->username,
         'name' => $user->name,
         'email' => $user->email,
         'role' => $user->role,
         'active' => $user->active,
    ));

   $this->view->user = $user;
   $this->view->currentUser = $currentUser;
   $this->view->form = $form_user;

   $keyTable = $this->_helper->db->getTable('Key');
   $this->view->keys = $keyTable->findBy(array('user_id' => $user->id));
   $values = $form_user->getValues();
	 $success = false;

    // API keys can be generated by individual user, but permission to use the
   // Keys are the same as permission for User role. This permission is granted only by Super User.
    if ($this->getRequest()->isPost()) {
 		    if (isset($_POST['update_api_keys'])) {
              // Create a new API key.
              if ($this->getParam('api_key_label')) {
                  $key = new Key;
                  $key->user_id = $user->id;
                  $key->label = $this->getParam('api_key_label');
                  $key->key = sha1($user->username . microtime() . rand());
                  $key->save();
                  $this->_helper->flashMessenger(__('A new API key was successfully createdrr.'), 'success');
                  $success = true;
              }
              // Rescend API keys.
              if ($this->getParam('api_key_rescind')) {
                  foreach ($this->getParam('api_key_rescind') as $keyId) {
                      $keyTable->find($keyId)->delete();
                  }
                  $this->_helper->flashMessenger(__('An existing API key was successfully rescinded.'), 'success');
                  $success = true;
              }
        } else {
              if  (!$form_user->isValid($_POST)) {
				       		$this->_helper->flashMessenger(__('There was an invalid entry on the form. Please try again.'), 'error');
                  return;
              }
              $user->setPostData($form_user->getValues());
              if ($user->save(false)) {
                  if ($currentUser->role=='super') {
                  		 if(!empty($user->group)) {
                  		      $userGroupsObjects = LibraryGroupUserRelationship::findUserRelationshipRecords($user->id);
                            foreach($userGroupsObjects as $userGroupsObject) {
                                $userGroupsObject->delete();
                            }
              		          $groups = $user->group;
      		                  foreach($groups as $group) {
      		                    $newUser_group = new LibraryGroupUserRelationship;
                              $newUser_group->entity_id = $user->id;
				    			            $newUser_group->group_id = $group;
				                      $newUser_group->save();
				                    }
				               }
                  }
                  $success = true;
                  $this->_helper->flashMessenger(
                      __('The user %s was successfully changed!', $user->username),
                          'success');
              } else {
                  $this->_helper->flashMessenger($user->getErrors());
              }
        } //$_POST['update_api_keys']
        if ($success) {
                // Redirect to the current page
				      $this->_helper->redirector->gotoRoute();
     	  }
    } // isPost()
} //edit

}// class
